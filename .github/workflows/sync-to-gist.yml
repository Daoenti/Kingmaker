name: Sync Vault to Gist

on:
  push:
    branches: [ main ]
    paths:
      - '**.md'  # Only trigger on markdown changes
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    
    outputs:
      gist_url: ${{ steps.sync_step.outputs.gist_url }}
      gist_id: ${{ steps.sync_step.outputs.gist_id }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Sync to Gist
      id: sync_step
      env:
        GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
        GIST_ID: ${{ secrets.GIST_ID }}
      run: |
        pip install requests
        python3 << 'PYTHON'
        import os, json, requests, sys, traceback
        from pathlib import Path

        token = os.environ.get('GITHUB_TOKEN', '')
        gist_id = os.environ.get('GIST_ID', '')
        
        print("=" * 70)
        print("🔍 DEBUGGING INFORMATION")
        print("=" * 70)
        print(f"Token present: {'Yes' if token else 'No'}")
        print(f"Token length: {len(token) if token else 0}")
        print(f"Gist ID present: {'Yes' if gist_id else 'No'}")
        print(f"Gist ID value: {gist_id if gist_id else '(empty)'}")
        print(f"Current directory: {os.getcwd()}")
        print("=" * 70)
        print()
        
        if not token:
            print("❌ ERROR: GIST_TOKEN secret is not set!")
            print("Please add your GitHub token as a secret named 'GIST_TOKEN'")
            sys.exit(1)
        
        try:
            # Collect markdown files
            files = {}
            exclude_dirs = {'.git', '.github', '.obsidian', '.trash', '.makemd', '.space', 'Tags'}
            
            print("📂 Scanning for markdown files...")
            print()
            
            for f in Path('.').rglob('*.md'):
                # Check if any excluded directory is in the path
                if any(excluded in f.parts for excluded in exclude_dirs):
                    print(f"  ⊗ Skipping: {f}")
                    continue
                
                try:
                    content = f.read_text(encoding='utf-8')
                    # Use forward slashes for cross-platform compatibility
                    filename = str(f).replace('\\', '/').lstrip('./')
                    files[filename] = content
                    print(f"  ✓ Added: {filename} ({len(content)} chars)")
                except Exception as e:
                    print(f"  ✗ Error reading {f}: {e}")
            
            print()
            print(f"📁 Total files collected: {len(files)}")
            print()
            
            if not files:
                print("❌ ERROR: No markdown files found!")
                print()
                print("This could mean:")
                print("  1. All .md files are in excluded directories")
                print("  2. The repository has no .md files")
                print("  3. The checkout didn't work properly")
                print()
                print("Directory contents:")
                for item in Path('.').iterdir():
                    print(f"  - {item.name} ({'dir' if item.is_dir() else 'file'})")
                sys.exit(1)
            
            # Show first few files that will be uploaded
            print("Sample of files to upload:")
            for i, (name, content) in enumerate(list(files.items())[:5]):
                preview = content[:100].replace('\n', ' ')
                print(f"  {i+1}. {name}")
                print(f"     Preview: {preview}...")
            if len(files) > 5:
                print(f"  ... and {len(files) - 5} more files")
            print()
            
            # API setup
            headers = {
                "Authorization": f"token {token}",
                "Accept": "application/vnd.github+json",
            }
            
            payload = {
                "description": "Kingmaker Campaign - Pathfinder",
                "files": {name: {"content": content} for name, content in files.items()}
            }
            
            # Debug: show payload structure (without full content)
            print("API Payload structure:")
            print(f"  Description: {payload['description']}")
            print(f"  Files count: {len(payload['files'])}")
            print(f"  File names: {list(payload['files'].keys())[:10]}")
            print()
            
            # Update or create gist
            if gist_id:
                print(f"Updating existing gist: {gist_id}")
                url = f"https://api.github.com/gists/{gist_id}"
                r = requests.patch(url, headers=headers, json=payload)
            else:
                print("Creating new gist...")
                payload["public"] = False
                url = "https://api.github.com/gists"
                r = requests.post(url, headers=headers, json=payload)
            
            print(f"API Response Status: {r.status_code}")
            
            if r.status_code not in [200, 201]:
                print(f"❌ API Error: {r.status_code}")
                print(f"Response: {r.text}")
                sys.exit(1)
            
            result = r.json()
            
            # Set outputs for GitHub Actions
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"gist_url={result['html_url']}\n")
                f.write(f"gist_id={result['id']}\n")
            
            print()
            print("=" * 70)
            print("✅ SUCCESS!")
            print("=" * 70)
            print(f"Gist URL: {result['html_url']}")
            print(f"Gist ID:  {result['id']}")
            print(f"Files:    {len(result['files'])}")
            print("=" * 70)
            
            if not gist_id:
                print()
                print("⚠️  IMPORTANT - FIRST TIME SETUP:")
                print("=" * 70)
                print(f"Add this as a repository secret named 'GIST_ID':")
                print()
                print(f"    {result['id']}")
                print()
                print("Steps:")
                print("1. Go to: https://github.com/Daoenti/Kingmaker/settings/secrets/actions")
                print("2. Click 'New repository secret'")
                print("3. Name: GIST_ID")
                print(f"4. Value: {result['id']}")
                print("=" * 70)
                
        except Exception as e:
            print()
            print("=" * 70)
            print("❌ ERROR OCCURRED")
            print("=" * 70)
            print(f"Error: {str(e)}")
            print()
            print("Full traceback:")
            traceback.print_exc()
            print("=" * 70)
            sys.exit(1)
        PYTHON
    
    - name: Display Gist Info
      if: always()
      run: |
        echo "════════════════════════════════════════════════════════════════════"
        echo "                        📝 GIST INFORMATION"
        echo "════════════════════════════════════════════════════════════════════"
        echo ""
        echo "Gist URL: ${{ steps.sync_step.outputs.gist_url }}"
        echo "Gist ID:  ${{ steps.sync_step.outputs.gist_id }}"
        echo ""
        echo "════════════════════════════════════════════════════════════════════"
        
        if [ -z "${{ secrets.GIST_ID }}" ]; then
          echo ""
          echo "⚠️  ACTION REQUIRED: Add GIST_ID Secret"
          echo "════════════════════════════════════════════════════════════════════"
          echo ""
          echo "Copy this Gist ID and add it as a repository secret:"
          echo ""
          echo "    ${{ steps.sync_step.outputs.gist_id }}"
          echo ""
          echo "Instructions:"
          echo "  1. Go to: https://github.com/Daoenti/Kingmaker/settings/secrets/actions"
          echo "  2. Click 'New repository secret'"
          echo "  3. Name: GIST_ID"
          echo "  4. Value: ${{ steps.sync_step.outputs.gist_id }}"
          echo ""
          echo "════════════════════════════════════════════════════════════════════"
        fi
